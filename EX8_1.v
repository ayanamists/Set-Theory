(** Coq coding by choukh, Feb 2021 **)

Require Export ZFC.EST8_2.

Section EX8_1_and_2.
Import 𝐎𝐍Operation.
Close Scope Card_scope.
Open Scope Nat_scope.

Definition t := Operation 5 Suc.

Example ex8_2_a : ∀α ∈ ω, t α = 5 + α.
Proof with nauto.
  intros α Hα.
  set {α ∊ ω | λ α, t α = 5 + α} as N.
  ω_induction N Hα; unfold t in *.
  - rewrite operation_0, add_ident...
  - rewrite operation_suc, IH; [|apply nat_is_ord]...
    rewrite add_suc, add_suc, add_assoc... apply add_ran...
Qed.

Example ex8_2_b : ∀ α, is_ord α → ω ⋸ α → t α = α.
Proof with neauto.
  set (λ α, ω ⋸ α → t α = α) as ϕ.
  apply (transfinite_induction_schema_on_ordinals ϕ).
  intros α Hoα IH Hle. unfold t.
  destruct (ord_is_suc_or_limit α) as [|Hlim]...
  - destruct H as [β [Hoβ Heq]]. subst.
    destruct Hle as [Hlt|Heq].
    + rewrite operation_suc... f_equal.
      apply IH... apply ord_leq_iff_lt_suc...
    + exfalso. apply (ord_is_limit_iff_not_suc ω)...
      exists β. split...
  - destruct (classic (α = ∅)). {
      subst. destruct Hle. exfalso0. exfalso. apply ω_neq_0...
    }
    rewrite operation_limit...
    apply ExtAx. split; intros Hx.
    + apply FUnionE in Hx as [n [Hn Hx]].
      assert (Hon: is_ord n). eapply ord_is_ords...
      destruct (classic (ω ⋸ n)) as [Hω|Hω]. {
        rewrite IH in Hx... eapply ord_trans...
      }
      assert (Hnω: n ∈ ω). {
        destruct (classic (n ∈ ω))... exfalso.
        apply Hω. apply ord_leq_iff_not_gt...
      }
      rewrite ex8_2_a in Hx...
      apply ord_leq_iff_sub in Hle... apply Hle.
      eapply ord_trans... apply add_ran...
    + assert (Hox: is_ord x). eapply ord_is_ords...
      destruct (classic (ω ⋸ x⁺)) as [Hω|Hω]. {
        eapply FUnionI. apply suc_in_limit...
        rewrite IH... apply suc_in_limit...
      }
      assert (Hxpω: x⁺ ∈ ω). {
        destruct (classic (x⁺ ∈ ω))... exfalso.
        apply Hω. apply ord_leq_iff_not_gt...
      }
      assert (Hxω: x ∈ ω). eapply ω_trans; revgoals...
      eapply FUnionI... rewrite ex8_2_a...
      rewrite <- add_ident at 1...
      rewrite add_comm... apply add_preserve_lt...
      repeat rewrite pred. do 4 apply BUnionI1. apply BUnionI2...
Qed.

End EX8_1_and_2.

(* ex8_6_a see EST8_1 Lemma monotone_operation_range_unbounded *)
(* ex8_6_b see EST8_1 Lemma normal_operation_range_closed *)
